type User {
  username: String!
  email: String!
  createdAt: Float!
  lastSeen: Float
  status: String
}

type Message {
  messageId: ID!
  content: String!
  username: String!
  timestamp: Float!
}

type Query {
  listMessages: [Message!]!
  getUser(username: String!): User
  getUserByEmail(email: String!): User
}

type Mutation {
  createMessage(content: String!, username: String!): Message!
  updateUserStatus(username: String!, status: String!): User
  updateLastSeen(username: String!): User
  createUser(username: String!, email: String!): User!
}

type Subscription {
  onCreateMessage: Message! @aws_subscribe(mutations: ["createMessage"])
  onUserStatusChange(username: String!): User
    @aws_subscribe(mutations: ["updateUserStatus"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
