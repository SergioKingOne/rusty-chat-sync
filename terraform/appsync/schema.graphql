type User {
  username: String!
  email: String!
  createdAt: Float!
  lastSeen: Float
  status: String
  conversations: [Conversation!]
}

type Message {
  messageId: ID!
  content: String!
  sender: String!
  timestamp: Float!
  status: MessageStatus!
  chatId: String! # Format: CHAT#user1#user2
}

type Conversation {
  chatId: String! # Format: CHAT#user1#user2
  otherUser: User!
  lastMessage: Message
  unreadCount: Int!
}

enum MessageStatus {
  SENDING
  SENT
  FAILED
}

type Query {
  getUser(username: String!): User
  getUserByEmail(email: String!): User
  getConversation(otherUsername: String!): [Message!]!
  listConversations: [Conversation!]!
  listUsers: [User!]!
}

type Mutation {
  createMessage(content: String!, receiverUsername: String!): Message!
  updateUserStatus(status: String!): User
  updateLastSeen(chatId: String!): Conversation
  createUser(username: String!, email: String!): User!
}

type Subscription {
  onCreateMessage(chatId: String!): Message
    @aws_subscribe(mutations: ["createMessage"])
  onUserStatusChange(username: String!): User
    @aws_subscribe(mutations: ["updateUserStatus"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
